{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/scripts/index.js","bundle.js","src/scripts/example.json","src/scripts/parser.js","src/scripts/simulation.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","processInput","simulation","process","textarea","value","output","textContent","getOutput","loadExample","key","this","getAttribute","exampleData","input","Simulation","x","y","document","getElementById","button","example_btns","querySelectorAll","addEventListener","./example","./simulation",2,"expected_output","b","c",3,"COMMAND_FORMATS","REGULAR","PLACE","getCommands","tableSize","_includeInValidCommands","command","_this","isValidCommand","commands","isValidPlaceCommand","inputToArray","startIndex","getFirstPlaceIndex","validCommands","slice","push","split","index","exec","isPlaceFormat","isInRange","getPlaceData","placeCommand","matches","parseInt","data",4,"size","position","COMPASS","parser","method","reset","toLowerCase","place","move","left","getCompassIndex","right","report","toString","join","getPosition","./parser"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n// entry point, will handle UI for inputting commands and executing program\n\nvar Simulation   = require('./simulation'),\n    exampleData  = require('./example');\n\n\nvar simulation = new Simulation({ x:5, y:5 });\n\nvar textarea     = document.getElementById('commands'),\n    button       = document.getElementById('process'),\n    output       = document.getElementById('output'),\n    example_btns = document.querySelectorAll('.example');\n\nfunction processInput() {\n    simulation.process(textarea.value);\n    output.textContent = simulation.getOutput();\n}\n\nfunction loadExample() {\n    var key = this.getAttribute('data-example');\n    textarea.value = exampleData[key].input;\n}\n\n// bind process button\nbutton.addEventListener('click', processInput);\n\n// bind each example button\nfor (var i = 0; i < example_btns.length; i++) {\n    example_btns[i].addEventListener('click', loadExample);\n}\n\n// load first example on load\ntextarea.value = exampleData.a.input;\n",null,"module.exports={\n    \"a\": {\n        \"input\": \"PLACE 0,0,NORTH\\nMOVE\\nREPORT\",\n        \"expected_output\": \"0,1,NORTH\"\n    },\n    \"b\": {\n        \"input\": \"PLACE 0,0,NORTH\\nLEFT\\nREPORT\",\n        \"expected_output\": \"0,0,WEST\"\n    },\n    \"c\": {\n        \"input\": \"PLACE 1,2,EAST\\nMOVE\\nMOVE\\nLEFT\\nMOVE\\nREPORT\",\n        \"expected_output\": \"3,3,NORTH\"\n    }\n}\n","/**\n * PARSER\n * Methods for parsing input into valid robot commands to be executed by the table module\n */\n\n'use strict';\n\n/**\n * RegExps for parsing command strings\n */\nvar COMMAND_FORMATS = {\n    REGULAR: /^(MOVE|LEFT|RIGHT|REPORT)$/,\n    PLACE:   /^(?:PLACE)\\s(\\d+),(\\d+),(NORTH|SOUTH|EAST|WEST)+$/\n};\n\nmodule.exports = {\n\n    getCommands: function(input, tableSize) {\n        // parses a string input and returns an array of commands for the robot to execute.\n        // invalid commands are different to ignored commands (which are still executed, but no\n        // action is taken as it would result in the robot falling off).\n\n        var commands      = this.inputToArray(input),\n            startIndex    = this.getFirstPlaceIndex(commands, tableSize),\n            validCommands = [],\n            _this         = this;\n\n        function _includeInValidCommands(command) {\n            return (\n                _this.isValidCommand(commands[i]) ||\n                _this.isValidPlaceCommand(commands[i], tableSize)\n            );\n        };\n\n        // return empty array if there are no commands to process\n        if (startIndex < 0) {\n            return [];\n        }\n\n        // take copy of array starting at first valid PLACE command\n        commands = commands.slice(startIndex);\n\n        // compose valid commands to return\n        for (var i = 0; i < commands.length; i++) {\n            if ( _includeInValidCommands(commands[i]) ) {\n                validCommands.push(commands[i]);\n            }\n        };\n\n        return validCommands;\n    },\n\n    inputToArray: function(input) {\n        // parse textarea input and return array of commands\n        return input === '' ? [] : input.split(/\\n/);\n    },\n\n    getFirstPlaceIndex: function(commands, tableSize) {\n        // returns the index of the first valid PLACE command given an array of commands\n        var index = -1;\n        for (var i = 0; i < commands.length; i++) {\n            if ( this.isValidPlaceCommand( commands[i], tableSize ) ) {\n                index = i;\n                break;\n            }\n        };\n        return index;\n    },\n\n    isValidCommand: function(command) {\n        // returns true if command is a valid MOVE, LEFT, RIGHT or REPORT command\n        return COMMAND_FORMATS.REGULAR.exec(command) !== null;\n    },\n\n    isValidPlaceCommand: function(command, tableSize) {\n        // returns bool indicating whether command is a valid PLACE command\n        // validity depends on both format and whether it is in range\n        var isPlaceFormat = COMMAND_FORMATS.PLACE.exec(command) !== null,\n            isInRange     = this.isInRange(command, tableSize);\n\n        return isPlaceFormat && isInRange;\n    },\n\n    getPlaceData: function(placeCommand) {\n        // return deserialised place data from placeCommand string\n        var matches = COMMAND_FORMATS.PLACE.exec(placeCommand);\n\n        return matches === null ? null : {\n            x: parseInt( matches[1], 10 ),\n            y: parseInt( matches[2], 10 ),\n            f: matches[3]\n        };\n    },\n\n    isInRange: function(placeCommand, tableSize) {\n        // tableSize = { x:5, y:5 }\n        // returns true if placeData fits in tableSize\n        var data = this.getPlaceData(placeCommand);\n\n        if (data === null) {\n            return false;\n        }\n\n        return (data.x <= tableSize.x) && (data.y <= tableSize.y);\n    }\n\n};\n","'use strict';\n\n// module for simulation, moving robot, processing commands\n\nvar parser = require('./parser');\n\n\nfunction Simulation(size) {\n    var size        = size || { x:5, y:5 },\n        position    = null,\n        output      = [];\n\n    var COMPASS = [\n        'NORTH',\n        'EAST',\n        'SOUTH',\n        'WEST'\n    ];\n\n    return {\n\n        process: function(input) {\n            // parses raw command input and performs commands\n            var commands = parser.getCommands(input, size),\n                method   = '';\n\n            this.reset();\n\n            for (var i = 0; i < commands.length; i++) {\n                method = commands[i].split(' ')[0].toLowerCase();\n                this[method](commands[i]); // command names map to method names\n            };\n        },\n\n        reset: function() {\n            position = null;\n            output = [];\n        },\n\n        place: function(command) {\n            position = parser.getPlaceData(command);\n        },\n\n        move: function() {\n            switch (position.f) {\n                case 'NORTH':\n                    if (position.y < size.y) {\n                        position.y++;\n                    }\n                    break;\n                case 'SOUTH':\n                    if (position.y > 0) {\n                        position.y--;\n                    }\n                    break;\n                case 'EAST':\n                    if (position.x < size.x) {\n                        position.x++;\n                    }\n                    break;\n                case 'WEST':\n                    if (position.x > 0) {\n                        position.x--;\n                    }\n                    break;\n            }\n        },\n\n        left: function() {\n            var index = this.getCompassIndex(position.f) - 1;\n\n            if (index < 0) {\n                index = COMPASS.length - 1;\n            }\n            position.f = COMPASS[index];\n        },\n\n        right: function() {\n            var index = this.getCompassIndex(position.f) + 1;\n\n            if (index >= COMPASS.length) {\n                index = 0;\n            }\n            position.f = COMPASS[index];\n        },\n\n        report: function() {\n            var report;\n            if (position === null) {\n                report = ''\n            }\n            else {\n                report = [\n                    position.x.toString(),\n                    position.y.toString(),\n                    position.f\n                ].join(',');\n            }\n\n            output.push(report);\n\n            return report;\n        },\n\n        getPosition: function() {\n            return position;\n        },\n\n        getCompassIndex: function(f) {\n            var index,\n                i = COMPASS.length;\n\n            while (i--) {\n                if (COMPASS[i] === f) {\n                    index = i;\n                }\n            }\n            return index;\n        },\n\n        getOutput: function() {\n            return output.join('\\n');\n        }\n\n    };\n};\n\nmodule.exports = Simulation;\n"],"sourceRoot":"/source/"}